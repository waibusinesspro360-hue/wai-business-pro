// Wai Business Pro ‚Äî Fuzzy WhatsApp Auto-Reply (Web API)
// Minimal Express server with fuzzy-matching replies.
// Author: Vitthal Jiddimani

const express = require("express");
const app = express();

app.use(express.json());

// ---- Health / Home (Uptime check) ----
app.get("/", (_req, res) => {
  res.send("Wai Business Pro Fuzzy Auto-Reply is Running! ‚úÖ");
});

// ---- Domain knowledge (Marathi + English mix) ----
const KB = [
  {
    tag: "pricing",
    patterns: [
      "‡§ï‡§ø‡§Ç‡§Æ‡§§", "‡§ï‡§ø‡§Æ‡§§‡•Ä", "‡§™‡•ç‡§∞‡§æ‡§à‡§∏", "price", "charges", "‡§ï‡§ø‡§§‡•Ä ‡§™‡•à‡§∏‡•á", "rate"
    ],
    replies: [
      "‡§≤‡§ø‡§∏‡•ç‡§ü‡§ø‡§Ç‡§ó ‡§´‡•Ä ‡§´‡§ï‡•ç‡§§ ‚Çπ99 ‚Äî ‡§´‡•ã‡§ü‡•ã, ‡§≤‡•ã‡§ï‡•á‡§∂‡§®, ‡§µ‡•á‡§≥‡§æ, ‡§ï‡•â‡§≤/‡§µ‡•ç‡§π‡•â‡§ü‡•ç‡§∏‡§Ö‡§™ ‡§¨‡§ü‡§£ ‡§∏‡§ó‡§≥‡§Ç!",
      "‚Çπ99 ‡§¨‡•á‡§∏‡§ø‡§ï ‡§≤‡§ø‡§∏‡•ç‡§ü‡§ø‡§Ç‡§ó. ‡§Ö‡§™‡§ó‡•ç‡§∞‡•á‡§°‡•ç‡§∏ ‡§π‡§µ‡•á ‡§Ö‡§∏‡§§‡•Ä‡§≤ ‡§§‡§∞ ‡§®‡§Ç‡§§‡§∞ add ‡§ï‡§∞‡•Ç ‡§∂‡§ï‡§§‡•ã."
    ],
  },
  {
    tag: "howto",
    patterns: [
      "‡§ï‡§∏‡•á ‡§ï‡§∞‡§æ‡§Ø‡§ö‡•á", "how to", "process", "steps", "join", "‡§≤‡§ø‡§∏‡•ç‡§ü‡§ø‡§Ç‡§ó ‡§ï‡§∏‡§Ç", "register"
    ],
    replies: [
      "Add Listing ‡§µ‡§∞ ‡§ï‡•ç‡§≤‡§ø‡§ï ‡§ï‡§∞‡§æ ‚Üí ‡§§‡§™‡§∂‡•Ä‡§≤ ‡§≠‡§∞‡§æ ‚Üí ‚Çπ99 ‡§™‡•á‡§Æ‡•á‡§Ç‡§ü ‚Üí ‡§§‡•Å‡§Æ‡§ö‡•Ä ‡§≤‡§ø‡§∏‡•ç‡§ü ‡§ë‡§ü‡•ã-‡§™‡§¨‡•ç‡§≤‡§ø‡§∂!",
      "‡§™‡•ç‡§∞‡•ã‡§∏‡•á‡§∏: ‡§®‡§æ‡§µ/‡§™‡§§‡•ç‡§§‡§æ/‡§´‡•ã‡§ü‡•ã ‚Üí Razorpay ‚Çπ99 ‚Üí ‡§≤‡§ó‡•á‡§ö ‡§≤‡§æ‡§à‡§µ‡•ç‡§π. ‡§Æ‡§¶‡§§ ‡§π‡§µ‡•Ä ‡§§‡§∞ 'help' ‡§ü‡§æ‡§à‡§™ ‡§ï‡§∞‡§æ."
    ],
  },
  {
    tag: "support",
    patterns: ["help", "‡§∏‡§™‡•ã‡§∞‡•ç‡§ü", "‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï", "contact", "issue", "problem", "‡§Æ‡§¶‡§§"],
    replies: [
      "‡§∏‡§™‡•ã‡§∞‡•ç‡§ü: waibusinesspro360@gmail.com ‚Äî 24x7 ‡§à‡§Æ‡•á‡§≤. ‡§§‡•ç‡§µ‡§∞‡§ø‡§§ ‡§Æ‡§¶‡§§‡•Ä‡§∏‡§æ‡§†‡•Ä 'HELP NOW' ‡§≤‡§ø‡§π‡§æ.",
      "‡§§‡•Å‡§Æ‡§ö‡§æ ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§™‡§æ‡§†‡§µ‡§æ, ‡§Ü‡§Æ‡•ç‡§π‡•Ä ‡§≤‡§ó‡•á‡§ö ‡§â‡§§‡•ç‡§§‡§∞ ‡§¶‡•á‡§ä. üì© waibusinesspro360@gmail.com"
    ],
  },
  {
    tag: "hours",
    patterns: ["‡§µ‡•á‡§≥", "timings", "hours", "open", "closing time", "‡§ï‡§ß‡•Ä ‡§â‡§ò‡§°‡§§‡•á"],
    replies: [
      "‡§°‡§ø‡§∞‡•á‡§ï‡•ç‡§ü‡§∞‡•Ä 24x7 ‡§ë‡§®‡§≤‡§æ‡§á‡§® ‡§Ü‡§π‡•á. ‡§µ‡•ç‡§Ø‡§µ‡§∏‡§æ‡§Ø‡§æ‡§Ç‡§ö‡•á ‡§µ‡•á‡§≥‡§æ ‡§§‡•ç‡§Ø‡§æ‡§Ç‡§ö‡•ç‡§Ø‡§æ ‡§™‡•á‡§ú‡§µ‡§∞ ‡§¶‡§ø‡§≤‡•á‡§≤‡•á ‡§Ö‡§∏‡§§‡§æ‡§§.",
    ],
  },
  {
    tag: "greeting",
    patterns: ["hi", "hello", "‡§®‡§Æ‡§∏‡•ç‡§ï‡§æ‡§∞", "‡§π‡•Ö‡§≤‡•ã", "hey", "‡§ï‡§æ‡§Ø ‡§∞‡•á"],
    replies: [
      "‡§®‡§Æ‡§∏‡•ç‡§ï‡§æ‡§∞! üëã Wai Business Pro ‡§Æ‡§ß‡•ç‡§Ø‡•á ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§Ü‡§π‡•á. ‡§ï‡§æ‡§Ø ‡§Æ‡§¶‡§§ ‡§ï‡§∞‡•Ç?",
      "Hello! How can I help you with your business listing today?"
    ],
  },
];

// ---- Utility: normalize + simple fuzzy score (token overlap + levenshtein-lite) ----
const norm = s =>
  (s || "")
    .toLowerCase()
    .replace(/[^\p{L}\p{N}\s]/gu, " ")
    .replace(/\s+/g, " ")
    .trim();

function tokenOverlapScore(a, b) {
  const A = new Set(norm(a).split(" "));
  const B = new Set(norm(b).split(" "));
  if (!A.size || !B.size) return 0;
  let hit = 0;
  for (const t of A) if (B.has(t)) hit++;
  return hit / Math.max(A.size, B.size);
}

function lev(a, b) {
  a = norm(a); b = norm(b);
  const m = a.length, n = b.length;
  if (!m && !n) return 1;
  const dp = Array(n + 1).fill(0);
  for (let j = 0; j <= n; j++) dp[j] = j;
  for (let i = 1; i <= m; i++) {
    let prev = dp[0];
    dp[0] = i;
    for (let j = 1; j <= n; j++) {
      const tmp = dp[j];
      dp[j] = Math.min(
        dp[j] + 1,
        dp[j - 1] + 1,
        prev + (a[i - 1] === b[j - 1] ? 0 : 1)
      );
      prev = tmp;
    }
  }
  const dist = dp[n];
  const maxLen = Math.max(m, n) || 1;
  return 1 - dist / maxLen; // 0..1 (1 is exact)
}

function fuzzyBestMatch(text) {
  let best = { tag: null, score: 0 };
  for (const item of KB) {
    for (const pat of item.patterns) {
      const s = Math.max(
        tokenOverlapScore(text, pat),
        lev(text, pat)
      );
      if (s > best.score) best = { tag: item.tag, score: s };
    }
  }
  return best;
}

function pick(arr) {
  return arr[Math.floor(Math.random() * arr.length)];
}

// ---- API: POST /wa  { text: "...", from?: "9198..." }
app.post("/wa", (req, res) => {
  const text = (req.body && req.body.text) || "";
  const from = (req.body && req.body.from) || "user";
  const q = text.trim();

  if (!q) {
    return res.json({
      ok: true,
      to: from,
      reply:
        "‡§®‡§Æ‡§∏‡•ç‡§ï‡§æ‡§∞! ‡§§‡•Å‡§Æ‡§ö‡§æ ‡§Æ‡•á‡§∏‡•á‡§ú ‡§∞‡§ø‡§ï‡§æ‡§Æ‡§æ ‡§Ü‡§≤‡§æ. ‡§ï‡•É‡§™‡§Ø‡§æ ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§≤‡§ø‡§π‡§æ ‚Äî ‡§â‡§¶‡§æ. '‡§™‡•ç‡§∞‡§æ‡§à‡§∏ ‡§ï‡§æ‡§Ø?'",
    });
  }

  const { tag, score } = fuzzyBestMatch(q);

  // ‡§ú‡§∞ ‡§∏‡•ç‡§ï‡•ã‡§Ö‡§∞ ‡§ï‡§Æ‡•Ä ‡§Ö‡§∏‡•á‡§≤ ‡§§‡§∞ generic fallback
  if (!tag || score < 0.42) {
    return res.json({
      ok: true,
      to: from,
      reply:
        "‡§∏‡§Æ‡§ú‡§≤‡§Ç. ‡§ï‡•É‡§™‡§Ø‡§æ ‡§•‡•ã‡§°‡§Ç ‡§∏‡•ç‡§™‡§∑‡•ç‡§ü ‡§≤‡§ø‡§π‡§æ‡§≤ ‡§ï‡§æ? (‡§â‡§¶‡§æ. '‡§ï‡§ø‡§Ç‡§Æ‡§§', '‡§ï‡§∏‡•á ‡§ï‡§∞‡§æ‡§Ø‡§ö‡•á', '‡§∏‡§™‡•ã‡§∞‡•ç‡§ü').",
      intentScore: Number(score.toFixed(2)),
    });
  }

  const found = KB.find(x => x.tag === tag);
  return res.json({
    ok: true,
    to: from,
    tag,
    intentScore: Number(score.toFixed(2)),
    reply: pick(found.replies),
  });
});

// ---- Start (Render uses PORT env) ----
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log("Server started on", PORT);
});
